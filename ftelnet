#!/usr/bin/env python

import getpass
import sys
import telnetlib
import getopt
import os
import re
import signal

def signalhandler(signal, frame):
    finfo("Caught Ctrl+c")
    sys.exit(0)

def fexecute(cmd):
    print(cmd)
    tn.write(cmd + "\n")
    tn.read_until(PROMPT)

def fexit():
    tn.write('exit\n')
    finfo("Ctrl+c, to exit the application")
    print tn.read_all()

def usage(argv):
    print "Usage %s [TARGET]" % (argv[0])

def frunfile(script):
    f = open(script, 'r')
    for line in f:
        line.strip('\n')
        if line == '\n':
            continue
        print line
        fexecute(line)

def fwarn(msg):
    print("\033[1;33m%s\033[0m" % msg)

def ferror(msg):
    print("\033[1;31m%s\033[0m" % msg)

def finfo(msg):
    print("\033[1;32m%s\033[0m" % msg)

def main(argv=sys.argv):
    global PROMPT
    global tn

    signal.signal(signal.SIGINT, signalhandler)

    try:
        opts, args = getopt.getopt(argv[1:], 'd:i:t:h', ["help", "output="])
    except getopt.GetoptError as err:
        ferror(str(err))
        usage()
        sys.exit(2)

    output = None
    TARGET = None
    user = "root"
    PROMPT = 'tangox['
    fdir = None
    fscript = None

    for o, a in opts:
        if o in ("-d", "--directory"):
            fdir = a
        elif o in ("-i", "--input"):
            fscript = a
        elif o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o in ("-t", "--target"):
            TARGET = a
        else:
            assert False, "Unhandled option %s" % o

    if TARGET == None:
        ferror("Need Target")
        usage(argv)
        sys.exit(2)

    finfo("Connecting to %s ..." % TARGET)

    tn = telnetlib.Telnet(TARGET)
    tn.read_until("login: ")
    fexecute(user)
    if fscript != None:
        finfo("Executing %s " % fscript)
        frunfile(fscript)

    if fdir != None:
        path = os.path.join(os.getcwd(), fdir)
        for files in sorted(os.listdir(path)):
            fileT = "%s/%s" % (path, files)
            fileT.strip()
            fileT = re.sub("//", "/", fileT)
            finfo("Executing %s " % fileT)
            frunfile(fileT)

    fexit()

if __name__ == "__main__":
    main()
